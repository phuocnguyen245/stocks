{"version":3,"file":"static/js/14.06f38dc8.chunk.js","mappings":"+RAEA,MAUA,EAVeA,EAAAA,KAAaC,MAAM,CAChCC,SAAUF,EAAAA,KAEPG,IAAI,EAAG,4CACPC,SAAS,wBACZC,SAAUL,EAAAA,KAEPG,IAAI,EAAG,4CACPC,SAAS,0B,sBCed,MAsFA,EAtFcE,KAAoB,IAADC,EAAAC,EAC/B,MAAOC,EAAOC,IAAiBC,EAAAA,EAAAA,GAAgB,SAAU,CAAC,GACpDC,GAAWC,EAAAA,EAAAA,OACVC,IAAWC,EAAAA,EAAAA,OACZ,SACJC,EAAQ,aACRC,EAAY,MACZC,EACAC,WAAW,OAAEC,KACXC,EAAAA,EAAAA,IAAkB,CACpBC,UAAUC,EAAAA,EAAAA,GAAYC,KAgBxB,OACEC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEC,EAAAA,EAAAA,KAACC,EAAAA,EAAM,CAACC,GAAI,CAAEC,EAAG,EAAGC,QAAS,kBAAmBL,UAC9CC,EAAAA,EAAAA,KAACK,EAAAA,EAAY,CAACC,MAAM,cAEtBN,EAAAA,EAAAA,KAACO,EAAAA,EAAU,CAACC,UAAU,KAAKC,QAAQ,KAAIV,SAAC,aAGxCF,EAAAA,EAAAA,MAACa,EAAAA,EAAG,CAACF,UAAU,OAAOG,YAAU,EAACC,SAAUvB,GArB9BwB,UACf,IACE,MAAMC,QAAiB5B,EAAQ,IAAK6B,IAAUC,SAC1B,IAADC,EAAnB,GAAIH,EAASI,KACXpC,EAA2B,QAAdmC,EAACH,EAASI,YAAI,IAAAD,OAAA,EAAbA,EAAeE,QAC7BnC,EAAS,WACTM,GAEJ,CAAE,MAAO8B,GACPC,QAAQC,IAAIF,EACd,KAWqElB,GAAI,CAAEqB,GAAI,GAAIxB,SAAA,EAC/EC,EAAAA,EAAAA,KAACwB,EAAAA,EAAS,CACRC,OAAO,SACPjD,UAAQ,EACRkD,WAAS,EACTC,MAAM,WACNC,aAAa,WACbC,WAAS,KACLzC,EAAS,YACbgC,QAAS5B,EAAOlB,SAChBwD,WAA2B,QAAjBnD,EAAEa,EAAOlB,gBAAQ,IAAAK,OAAA,EAAfA,EAAiBoD,WAE/B/B,EAAAA,EAAAA,KAACwB,EAAAA,EAAS,CACRC,OAAO,SACPjD,UAAQ,EACRkD,WAAS,EACTC,MAAM,WACNK,KAAK,WACLJ,aAAa,sBACTxC,EAAS,YACbgC,QAAS5B,EAAOf,SAChBqD,WAA2B,QAAjBlD,EAAEY,EAAOf,gBAAQ,IAAAG,OAAA,EAAfA,EAAiBmD,WAE/B/B,EAAAA,EAAAA,KAACiC,EAAAA,EAAgB,CACfC,SACElC,EAAAA,EAAAA,KAACmC,EAAAA,EAAQ,CACPtD,MAAM,WACNyB,MAAM,UACNJ,GAAI,CACF,qBAAsB,CACpBkC,KAAM,iBAGVC,gBAAc,IAGlBV,MAAM,iBAER3B,EAAAA,EAAAA,KAACsC,EAAAA,EAAM,CAACN,KAAK,SAASN,WAAS,EAACjB,QAAQ,YAAYP,GAAI,CAAEqB,GAAI,EAAGgB,GAAI,GAAIxC,UACvEC,EAAAA,EAAAA,KAACO,EAAAA,EAAU,CAACiC,WAAY,IAAIzC,SAAC,eAE/BF,EAAAA,EAAAA,MAAC4C,EAAAA,GAAI,CAACC,WAAS,EAAA3C,SAAA,EACbC,EAAAA,EAAAA,KAACyC,EAAAA,GAAI,CAACE,MAAI,EAACC,IAAE,EAAA7C,UACXC,EAAAA,EAAAA,KAAC6C,EAAU,CAACC,GAAG,IAAG/C,SAAC,wBAErBC,EAAAA,EAAAA,KAAC6C,EAAU,CAACC,GAAG,YAAW/C,SAAC,2CAG9B,EAMD8C,GAAaE,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,EAAaE,IAAA,IAAC,MAAEC,GAAOD,EAAA,MAAM,CAC9C3C,MAAO4C,EAAMC,QAAQC,KAAKC,QAC1B,UAAW,CACT/C,MAAO4C,EAAMC,QAAQE,QAAQC,MAEhC,G","sources":["modules/Auth/Login/schema.ts","modules/Auth/Login/index.tsx"],"sourcesContent":["import * as yup from 'yup'\n\nconst schema = yup.object().shape({\n  username: yup\n    .string()\n    .min(5, 'Username must has more than 5 characters')\n    .required('Username is required'),\n  password: yup\n    .string()\n    .min(5, 'Password must has more than 5 characters')\n    .required('Password is required')\n})\nexport default schema\n","import { yupResolver } from '@hookform/resolvers/yup'\nimport { LockOutlined } from '@mui/icons-material'\nimport {\n  Avatar,\n  Box,\n  Button,\n  Checkbox,\n  FormControlLabel,\n  Grid,\n  TextField,\n  Typography,\n  styled\n} from '@mui/material'\nimport { useForm } from 'react-hook-form'\nimport { useNavigate } from 'react-router'\nimport { Link } from 'react-router-dom'\nimport { useLoginMutation } from 'src/services/user.services'\nimport schema from './schema'\nimport { useLocalStorage } from 'src/hooks'\n\ninterface FormBody {\n  username: string\n  password: string\n}\n\nconst Login = (): JSX.Element => {\n  const [value, setLocalValue] = useLocalStorage('tokens', {})\n  const navigate = useNavigate()\n  const [onLogin] = useLoginMutation()\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors }\n  } = useForm<FormBody>({\n    resolver: yupResolver(schema)\n  })\n\n  const onSubmit = async (values: FormBody): Promise<void> => {\n    try {\n      const response = await onLogin({ ...values }).unwrap()\n      if (response.data) {\n        setLocalValue(response.data?.tokens)\n        navigate('/stocks')\n        reset()\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  return (\n    <>\n      <Avatar sx={{ m: 1, bgcolor: 'secondary.main' }}>\n        <LockOutlined color='action' />\n      </Avatar>\n      <Typography component='h1' variant='h5'>\n        Sign in\n      </Typography>\n      <Box component='form' noValidate onSubmit={handleSubmit(onSubmit)} sx={{ mt: 1 }}>\n        <TextField\n          margin='normal'\n          required\n          fullWidth\n          label='Username'\n          autoComplete='username'\n          autoFocus\n          {...register('username')}\n          error={!!errors.username}\n          helperText={errors.username?.message}\n        />\n        <TextField\n          margin='normal'\n          required\n          fullWidth\n          label='Password'\n          type='password'\n          autoComplete='current-password'\n          {...register('password')}\n          error={!!errors.password}\n          helperText={errors.password?.message}\n        />\n        <FormControlLabel\n          control={\n            <Checkbox\n              value='remember'\n              color='primary'\n              sx={{\n                '& .MuiSvgIcon-root': {\n                  fill: 'primary.main'\n                }\n              }}\n              defaultChecked\n            />\n          }\n          label='Remember me'\n        />\n        <Button type='submit' fullWidth variant='contained' sx={{ mt: 3, mb: 2 }}>\n          <Typography fontWeight={600}>Sign In</Typography>\n        </Button>\n        <Grid container>\n          <Grid item xs>\n            <CustomLink to='#'>Forgot password?</CustomLink>\n          </Grid>\n          <CustomLink to='/register'>Don&apos;t have an account? Sign Up</CustomLink>\n        </Grid>\n      </Box>\n    </>\n  )\n}\n\nexport default Login\n\nconst CustomLink = styled(Link)(({ theme }) => ({\n  color: theme.palette.text.primary,\n  '&:hover': {\n    color: theme.palette.primary.main\n  }\n}))\n"],"names":["yup","shape","username","min","required","password","Login","_errors$username","_errors$password","value","setLocalValue","useLocalStorage","navigate","useNavigate","onLogin","useLoginMutation","register","handleSubmit","reset","formState","errors","useForm","resolver","yupResolver","schema","_jsxs","_Fragment","children","_jsx","Avatar","sx","m","bgcolor","LockOutlined","color","Typography","component","variant","Box","noValidate","onSubmit","async","response","values","unwrap","_response$data","data","tokens","error","console","log","mt","TextField","margin","fullWidth","label","autoComplete","autoFocus","helperText","message","type","FormControlLabel","control","Checkbox","fill","defaultChecked","Button","mb","fontWeight","Grid","container","item","xs","CustomLink","to","styled","Link","_ref","theme","palette","text","primary","main"],"sourceRoot":""}